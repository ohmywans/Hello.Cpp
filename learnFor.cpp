#include <iostream>

using namespace std;
int main() {

    // 반복문이란?
    for(int i = 0; i < 5; i++) {
        // int형 변수 i가 0인데 이 i가 5보다 작을때까지 반복
        // 할 거고, 반복을 한 번 할 때마다 1씩 증가할거야.
        // 총 5번 반복하겠지. (0,1,2,3,4)

    cout << i << "번째입니다." << endl;
    }
    /* 기본 규칙 4가지
    1. 반복문에 사용할 카운터의 값을 초기화 (몇 번 반복할지 
    기준을 제시하기 위해 사용하는 변수 i, in 위 예시)
    2. 반복문을 진행할 것인지 '조건 검사' ex) i < 5
    3. 반복문 몸체를 수행한다. for문 바로 뒤의 {} 속 내용
    4. 카운터의 값을 변화한다. ex) i++, 이건 for문 밖의 {}에서 선언해도 된다.
    */

   //<증가 연산자와 감소 연산자>
   int a = 10; 
   int b = 10;

   cout << "a는 " << a << ", b는 " << b << endl; // 출력: a는 10, b는 10
   cout << "a++는 " << a++ << endl; // 출력: a++는 10
   cout << "++b는 " << ++b << endl; // 출력: ++b는 11
   // a++는 a에 대한 식을 판단하고 증가시키는 것이고, 
   // ++b는 b를 증가시키고 식을 판단하는 것이다.
   cout << "a는 " << a << ", b는 " << b << endl;
   // ++이 앞에 오든, 뒤에 오든 어차피 1 증가하는 것은 동일하기
   // 때문에 출력 : a는 11, b는 11

   // 반복문에서 i++ 는 i = i + 1;과 동일하게, i-- = i - 1;과
   // 동일하게 동작한다.

   // <관계 표현식> in 반복문
   /*
   i > 0를 예를 들자면, 좌항이 크면 true, 우항이 크거나 같으면
   일반적으로 false를 반환한다. 고로, 카운터의 값에 대한 조건을 판단할 때는
   조건식이 true일 때만 반복문이 수행된다. 부등호로 표현된 식을 컴퓨터 언어에서
   '관계 표현식' 이라고 부른다. 
1. a < b : 좌항이 작다.
2. a <= b : 좌항이 작거나 같다.
3. a > b : 좌항이 크다.
4. a >= b : 좌항이 크거나 같다.
5. a == b : 같다. ('='와 혼동하지마.)
6. a != b : 같지 않다.
   */
  
   return 0;
}
